% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_function_result.R
\name{plot_heatmap}
\alias{plot_heatmap}
\alias{plot_heatmap,DEGdata-method}
\title{Plot a heatmap}
\usage{
\S4method{plot_heatmap}{SummarizedExperiment}(
  object,
  type = c("centered", "contrast"),
  manual_contrast = NULL,
  kmeans = FALSE,
  k = 6,
  color = c("RdBu", "RdYlBu", "RdYlGn", "BrBG", "PiYG", "PRGn", "PuOr", "RdGy",
    "Spectral"),
  col_limit = 6,
  indicate = NULL,
  row_font_size = 6,
  col_font_size = 10,
  clustering_distance = c("euclidean", "maximum", "manhattan", "canberra", "binary",
    "minkowski", "pearson", "spearman", "kendall", "gower"),
  split_order = NULL,
  label_few_peptide_rows = FALSE,
  chooseToshow = NULL,
  plot = TRUE,
  seed = 42,
  ...
)

\S4method{plot_heatmap}{DEGdata}(
  object,
  type = c("centered", "contrast"),
  manual_contrast = NULL,
  kmeans = FALSE,
  k = 6,
  color = c("RdBu", "RdYlBu", "RdYlGn", "BrBG", "PiYG", "PRGn", "PuOr", "RdGy",
    "Spectral"),
  col_limit = 6,
  indicate = NULL,
  row_font_size = 6,
  col_font_size = 10,
  clustering_distance = c("euclidean", "maximum", "manhattan", "canberra", "binary",
    "minkowski", "pearson", "spearman", "kendall", "gower"),
  split_order = NULL,
  label_few_peptide_rows = FALSE,
  chooseToshow = NULL,
  plot = TRUE,
  seed = 42,
  ...
)
}
\arguments{
\item{object}{SummarizedExperiment or DEGDdata
object for which differentially enriched proteins are annotated
(output from \code{\link{test_diff}()} and \code{\link{add_rejections}()}).}

\item{type}{type 'contrast' or 'centered',
The type of data scaling used for plotting.
Either the fold change ('contrast') or
the centered log2-intensity ('centered').}

\item{manual_contrast}{Character.
Only plot significant proteins in certain contrasts.}

\item{kmeans}{Logical(1),
Whether or not to perform k-means clustering.}

\item{k}{Integer(1),
Sets the number of k-means clusters, k must less than row of heatmap}

\item{color}{Character(1), sets the color panel (from \pkg{RColorBrewer}).
It can be a palette name in "RdBu", "RdYlBu", "RdYlGn", "BrBG", "PiYG", "PRGn", "PuOr", "RdGy", "Spectral".}

\item{col_limit}{Integer(1),
Sets the outer limits of the color scale.}

\item{indicate}{Character,
Sets additional annotation on the top of the heatmap
based on columns from the experimental design (colData).
Only applicable to type = 'centered'.}

\item{row_font_size}{Integer(1),
Font size of row name}

\item{col_font_size}{Integer(1),
Font size of columns label.}

\item{clustering_distance}{Character(1)."euclidean", "maximum", "manhattan", "canberra",
"binary", "minkowski", "pearson", "spearman", "kendall" or "gower",
Or a Function used to calculate clustering distance (for proteins and samples).
Based on \code{\link[ComplexHeatmap]{Heatmap}}
and \code{\link[cluster]{daisy}}.}

\item{split_order}{a integer vector in 1:k.
The order of cluster slices in the heatmap. If NULL, slices order is based clustering distance. Work if Kmeans = TRUE.}

\item{label_few_peptide_rows}{Logic(1)
If TRUE, label proteins with few peptide by color.
Proteins with only one peptide show a purple name in heatmap, with two peptide show a blue name.}

\item{chooseToshow}{Character vector of the chosen proteins/peptides names.
If is not null, only plot the chosen proteins/peptides in it}

\item{plot}{Logical(1)
If \code{TRUE} (default) the heatmap is produced.
Otherwise (if \code{FALSE}), the data which the
heatmap is based on are returned.}

\item{seed}{Integer(1), the random seed that effect kmeans cluster in heatmap.
Preset a seed could a repeatable cluster result.}

\item{...}{Other parameters to \code{\link[ComplexHeatmap]{Heatmap}}.}
}
\value{
return a heatmap (generated by \code{\link[ComplexHeatmap]{Heatmap}}) or a data.frame if plot = F.
}
\description{
\code{plot_heatmap} generates a heatmap of all or selected features for DEP or DEG data.
}
\examples{

# Load example
data(Silicosis_pg)
data <- Silicosis_pg
data_unique <- make_unique(data, "Gene.names", "Protein.IDs", delim = ";")

# Differential test
ecols <- grep("LFQ.", colnames(data_unique))
se <- make_se_parse(data_unique, ecols,mode = "delim")
filt <- filter_se(se, thr = 0, fraction = 0.4, filter_formula = ~ Reverse != "+" & Potential.contaminant!="+")
norm <- normalize_vsn(filt)
imputed <- impute(norm, fun = "MinProb", q = 0.05)
diff <- test_diff(imputed, type = "control", control  = c("PBS"), fdr.type = "Storey's qvalue")
dep <- add_rejections(diff, alpha = 0.01,lfc = 2)

# Heatmap
plot_heatmap(dep)

}
